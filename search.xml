<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[git常用命令收集]]></title>
      <url>%2Fessence%2F2017%2F03%2F16%2Fgit-md%2F</url>
      <content type="text"><![CDATA[工欲善其事,必先利其器git init 在工作目录初始化新仓库 git clone git://github.com/xxxx/test.git 从现有仓库克隆，会在当前目录下创建一个名为test的目录 git clone git://github.com/xxxx/test.git myGit 从现有仓库克隆，自定义新建的仓库的目录名称为myGit git status 检查当前文件的状态 git add [file] 将未缓存的改动添加（添加到暂存区），状态变为已缓存（可反复多次使用，添加多个文件） git add *.* 一次性添加所有的文件到暂存区 git add -f [file] 强制添加到暂存区 git commit -m &quot;提交说明&quot; 将已缓存的改动提交，提交的同时同时跟上本次的提交说明(这个命令只负责提交暂存区的文件) git commit -a 会把已经改动的（已经添加到暂存区）的文件的改动add进来，然后提交，对于那些没有被添加到暂存区的改动，需要再次add git commit --amend 增补提交，会使用与当前提交的节点相同的父节点进行一次新的提交，旧的提交将会被取消 git diff 查看不同,比较工作目录中当前文件和暂存区域快照之间的区别，也就是修改之后没有暂存起来的内容 git diff --cached 对比已暂存起来的文件和上次提交时的文件的区别 git diff HEAD 比较工作目录和上次提交之间的所有改动 git diff [version tag] 查看自从某个版本之后都改动了什么 git diff [branch A] [branch B] 用来对比两个分支，返回两个分支修改的所有文件 git diff [branch A] [branch B] test.md 对比两个分支中指定文件test.md的差异 git reset --hard &quot;版本号&quot; 回滚到指定版本 git reflog 查看命令历史，记录每一次命令操作 git checkout -- file 把文件在工作区的修改全部撤销 git revert [version] 还原一个版本 git reset HEAD file 可以把暂存区的修改全部撤销，重新放回工作区 git rm file 删除文件 如果文件被误删到暂存区，可以这样恢复： git reset HEAD file git checkout -- file git push [origin] 将本地库的代码提交到远程库 git pull [origin master] 从其他版本库将代码更新到本地（将origin这个版本库的代码更新到 master主枝） git branch [mybranch] 创建分支mybranch git checkout [mybranch] 切换分支 git checkout -b [mybranch] 创建分支并切换到分支mybranch git rebase master 更新master主线上的内容到该分支上 git checkout master 切换到分支master git rebase [mybranch] 更新mybranch上的内容到master主线上 git branch -d [mybranch] 删除mybranch分支 git branch -D [mybranch] 强制删除mybranch分支 git branch 列出所有分支,当前分支前面会有一个* git branch -v 查看所有分支最后一次提交 git merge [mybranch] 合并分支mybranch到当前分支，fast forward合并，只保留单条分支记录 git merge --no-ff -m &quot;合并说明&quot; [branch] 普通合并，可以保存之前的分支历史，能够更好查看merge历史，以及分支状态 git branch --merged 查看哪些分支合并到当前分支 git branch --no-merged 查看还有哪些分支未合并到当前分支 git fetch orign 更新远程到本地 git push orign [mybranch] 推送分支 git log --graph 查看分支合并图 git log 查看提交历史 git log -1 查看最后一次提交 git stash 把当前工作现场”存储”起来 git stash list 查看存储起来的工作现场 git stash apply 恢复工作现场，但是stash内容并不删除 git stash drop 删除stash内容 git stash pop 恢复的同时，把stash也删除 git stash apply stash@{0} 恢复指定的stash，可以多次stash git remote 查看远程库信息 git remote -v 查看更加详细的远程库信息 git tag [v1.0] 创建新的标签 git tag 查看所有标签 git tag [v0.9] [6224937] 可以对历史的提交打标签，6224937这个是提交id git tag show [v0.9] 查看标签信息 git tag -a [v0.9] -m [&quot;tag comment&quot;] 创建带有说明的标签， -a指定标签名 -m指定说明文字 git tag -s [tag-name] -m [&quot;tag comment&quot;] 采用PGP签名标签 git tag -d [tag-name] 删除标签 git push origin [tag-name] 推送标签到远程 删除推送到远程的标签: 先删除本地的: git tag -d [tag-name]在删除远程的: git push origin :refs/tags/[tag-name] 配置别名: git config --global alias.[别名] [git命令] git status —&gt; git config --global alias.s statusgit checkout —-&gt; git config --global alias.co checkoutgit commit —-&gt; git config --global alias.c commitgit branch —-&gt; git config --global alias.b branchgit reset HEAD [file] ---&gt;git config –global alias.unstage ‘reset HEAD’ `撤销修改git log -1 —-&gt; git config --global alias.last &#39;log -1&#39; `查看最后一次提交`` --global针对当前用户起作用，全局的。如果不加，只针对当前仓库起作用 当前用户的git配置文件为用户主目录下的一个隐藏文件.gitconfig,可以直接修改这个文件配置别名，如果配置错误，可以删掉文件重新通过命令配置]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[新Blog第一篇文章]]></title>
      <url>%2Fessence%2F2017%2F03%2F08%2Findex%2F</url>
      <content type="text"><![CDATA[兴趣遍地都是，专注和持之以恒才是真正稀缺的新的博客终于被搭建好啦，了却了一桩心事，从一开始知道可以利用github来搭建博客之后，一直想试试。搭建博客最主要目的，就是为了督促自己平时能够多学习多记录，把平时学的点点滴滴用文字给记录下来，起到加深印象和方便自己以后查阅。之前在博客园写过一段时间的博客，后来由于种种原因没有去更新，最主要的原因还是太懒啦。希望这次新搭建的博客能够坚持更新下去。加油！！！]]></content>
    </entry>

    
  
  
</search>
